// =======================================
// üß± STRUCTURE HTML ET S√âLECTION DES √âL√âMENTS
// =======================================

// S√©lection d'un seul √©l√©ment HTML (le premier <div> trouv√© dans le DOM)
console.log(document.querySelector("div"));

// S√©lection de tous les √©l√©ments avec la classe "container" ‚Üí retourne une NodeList
console.log(document.querySelectorAll(".container"));

// Stockage d‚Äôun √©l√©ment avec la classe "container" dans une constante
const mydiv = document.querySelector(".container");

// S√©lection de la premi√®re liste <ul> trouv√©e dans le DOM
const list = document.querySelector("ul");

// ‚ùå Ne fonctionne pas directement car `list` n'est pas un tableau (mais un √©l√©ment <ul>)
// list.forEach((li) => console.log(li));

// ‚úÖ Transformation en tableau (si n√©cessaire pour it√©rer sur les enfants par exemple)
Array.from(list);

// Nom du noeud HTML s√©lectionn√© (ex. "DIV")
console.log(mydiv.nodeName);

// =======================================
// ‚úèÔ∏è CONTENU HTML ET TEXTE
// =======================================

// R√©cup√©rer tout le contenu HTML interne (y compris les balises)
console.log(mydiv.innerHTML);

// Modifier dynamiquement le contenu HTML
mydiv.innerHTML = "<h1>Hello</h1>";

// R√©cup√©rer le texte visible de l‚Äô√©l√©ment (respecte les espaces)
console.log(mydiv.innerText);

// R√©cup√©rer le texte brut (y compris les balises cach√©es)
console.log(mydiv.textContent);

// =======================================
// ‚öôÔ∏è ATTRIBUTS
// =======================================

// Ajouter un attribut
mydiv.setAttribute("hidden", "hidden");

// Supprimer un attribut
mydiv.removeAttribute("hidden");

// Lire la valeur d‚Äôun attribut
console.log(mydiv.getAttribute("class"));

// =======================================
// üé® CLASSES CSS
// =======================================

// Ajouter une classe
mydiv.classList.add("hidden");

// Supprimer une classe
mydiv.classList.remove("hidden");

// Remplacer une classe par une autre
mydiv.classList.replace("hidden", "show");

// V√©rifie si une classe est pr√©sente ‚Üí retourne true ou false
console.log(mydiv.classList.contains("hidden"));

// Alterner une classe toutes les secondes
const myinterval = setInterval(() => {
  mydiv.classList.toggle("hidden");
}, 1000);

// Stopper l'alternance au bout de 5 secondes
setTimeout(() => {
  clearInterval(myinterval);
}, 5000);

// =======================================
// üé® STYLISATION DES √âL√âMENTS
// =======================================

// Acc√©der aux styles inline
console.log(mydiv.style);

// Acc√©der aux styles calcul√©s (appliqu√©s via CSS ou h√©rit√©s)
console.log(getComputedStyle(mydiv).fontSize);

// =======================================
// ‚ûï AJOUT/MODIFICATION D'√âL√âMENTS
// =======================================

// Cr√©er un nouvel √©l√©ment <div>
const newdiv = document.createElement("div");
newdiv.textContent = "hello world";

// Ajouter l'√©l√©ment √† la fin de `mydiv`
mydiv.appendChild(newdiv);

// Autre m√©thode d‚Äôajout (peut aussi ajouter du texte)
mydiv.append(newdiv);

// Ajouter au d√©but du body
document.body.prepend(newdiv);

// Ins√©rer avant ou apr√®s un √©l√©ment sp√©cifique
mydiv.insertAdjacentElement("beforebegin", newdiv); // avant mydiv
mydiv.insertAdjacentElement("afterbegin", newdiv); // √† l‚Äôint√©rieur, au d√©but

// =======================================
// üë®‚Äçüëß RELATIONS PARENT/ENFANT
// =======================================

// S√©lectionner tous les <li> dans une liste
list.querySelectorAll("li");

// Acc√©der aux enfants directs
console.log(list.children); // HTMLCollection
console.log(list.childNodes); // NodeList (inclut les textes et commentaires)

// Acc√©der au premier et dernier enfant
console.log(list.firstChild);
console.log(list.lastChild);

// Acc√©der au parent
console.log(list.parentNode); // peut √™tre un noeud (incluant des commentaires)
console.log(list.parentElement); // renvoie uniquement un √©l√©ment

// Acc√©der aux √©l√©ments fr√®res (siblings)
console.log(list.nextElementSibling);
console.log(list.previousElementSibling);

// V√©rifier si un √©l√©ment est enfant d‚Äôun autre
console.log(list.contains(newdiv)); // true / false

// Supprimer un √©l√©ment du DOM
list.remove();

// =======================================
// üß† √âV√àNEMENTS
// =======================================

// S√©lectionner un bouton
const btn = document.querySelector("button");
console.log(btn);

// Ajouter un √©couteur d‚Äô√©v√©nement sur le body pour la touche rel√¢ch√©e
document.body.addEventListener("keyup", (event) => {
  console.log(event); // objet √©v√©nement
  console.log(event.altKey ? "alt" : "no alt"); // si Alt est press√©e
  // Tu peux aussi ajouter ici : event.clientX / event.clientY pour la position souris
});
